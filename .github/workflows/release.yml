name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: jarvis-linux-amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: jarvis-linux-amd64-static
          - target: x86_64-apple-darwin
            os: macos-latest
            name: jarvis-macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: jarvis-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: jarvis-windows-amd64
            extension: .exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/jarvis release/${{ matrix.name }}
          chmod +x release/${{ matrix.name }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          cp target/${{ matrix.target }}/release/jarvis.exe release/${{ matrix.name }}.exe

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd release
          tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd release
          7z a ${{ matrix.name }}.zip ${{ matrix.name }}.exe

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release/${{ matrix.name }}.tar.gz
          asset_name: ${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release/${{ matrix.name }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip